name: Deploy CD

on:

  # Run on push on production branches
  push:
    branches:
      # Production
      - main
    paths:
      # CI files
      - '.github/workflows/deploy.yml'
      - 'docker-compose.yml'
      - 'docker-compose.cicd.yml'
      - '.env'
      # Application files
      - 'app/**'
      - 'v1/**'
      - 'v2/**'

  # Run on manual triggers
  workflow_dispatch:

# Set GITHUB_TOKEN permissions for the workflow
permissions:
  contents: read

# Set workflow concurrency rules
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:

  # Build job
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:

      # Steps dependencies

      - name: Checkout
        uses: actions/checkout@v4

      # Execution steps

      - name: Pull dependencies
        run: |
          # docker compose pull --ignore-buildable
          docker compose \
            -f ./docker-compose.yml -f ./docker-compose.cicd.yml \
            --env-file .env \
            pull --ignore-buildable

      - name: Build for production
        env:
          GITHUB_REPOSITORY_URL: https://github.com/${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
          BUILD_CHECK: "false" # Skip type checks
        run: |
          # docker compose build
          export DOCKER_UID="$(id -u)"
          docker compose \
            -f ./docker-compose.yml -f ./docker-compose.cicd.yml \
            --env-file .env \
            build

      - name: Copy application files
        run: |
          # docker compose up
          export DOCKER_UID="$(id -u)"
          docker compose \
            -f ./docker-compose.yml -f ./docker-compose.cicd.yml \
            --env-file .env \
            up

      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages-app
          path: ./app/dist

  # Build v1 job
  build-v1:
    name: Build v1
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:

      # Steps dependencies

      - name: Checkout
        uses: actions/checkout@v4

      # Execution steps

      - name: Pull dependencies
        run: |
          # docker compose pull --ignore-buildable
          docker compose \
            -f ./docker-compose-v1.yml -f ./docker-compose-v1.cicd.yml \
            --env-file .env \
            pull --ignore-buildable

      - name: Build for production
        env:
          GITHUB_REPOSITORY_URL: https://github.com/${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
          BUILD_CHECK: "false" # Skip type checks
        run: |
          # docker compose build
          export DOCKER_UID="$(id -u)"
          docker compose \
            -f ./docker-compose-v1.yml -f ./docker-compose-v1.cicd.yml \
            --env-file .env \
            build

      - name: Copy application files
        run: |
          # docker compose up
          export DOCKER_UID="$(id -u)"
          docker compose \
            -f ./docker-compose-v1.yml -f ./docker-compose-v1.cicd.yml \
            --env-file .env \
            up

      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages-v1
          path: ./v1/dist

  # Build v2 job
  build-v2:
    name: Build v2
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:

      # Steps dependencies

      - name: Checkout
        uses: actions/checkout@v4

      # Execution steps

      - name: Pull dependencies
        run: |
          # docker compose pull --ignore-buildable
          docker compose \
            -f ./docker-compose-v2.yml -f ./docker-compose-v2.cicd.yml \
            --env-file .env \
            pull --ignore-buildable

      - name: Build for production
        env:
          GITHUB_REPOSITORY_URL: https://github.com/${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
          BUILD_CHECK: "false" # Skip type checks
        run: |
          # docker compose build
          export DOCKER_UID="$(id -u)"
          docker compose \
            -f ./docker-compose-v2.yml -f ./docker-compose-v2.cicd.yml \
            --env-file .env \
            build

      - name: Copy application files
        run: |
          # docker compose up
          export DOCKER_UID="$(id -u)"
          docker compose \
            -f ./docker-compose-v2.yml -f ./docker-compose-v2.cicd.yml \
            --env-file .env \
            up

      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages-v2
          path: ./v2/dist

  # Merge job
  merge:
    name: Merge
    runs-on: ubuntu-latest
    timeout-minutes: 10

    # Job dependencies
    needs:
      - build
      - build-v1
      - build-v2

    steps:

      # Execution steps

      - name: Download GitHub Pages artifacts
        uses: actions/download-artifact@v4
        with:
          # Expected artifact names:
          # - github-pages-app
          # - github-pages-v1
          # - github-pages-v2
          pattern: github-pages-*
          path: .

      - name: Merge GitHub Pages artifacts
        run: |
          # Merge GitHub Pages artifacts
          mkdir -p ./app/dist &&
            mv ./github-pages-app/* ./app/dist
          mkdir -p ./app/dist/v1 &&
            mv ./github-pages-v1/* ./app/dist/v1
          mkdir -p ./app/dist/v2 &&
            mv ./github-pages-v2/* ./app/dist/v2

      - name: Upload merged GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./app/dist

  # Deploy job
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10

    # Job dependencies
    needs:
      - build

    # Set GITHUB_TOKEN permissions for the job
    permissions:
      pages: write
      id-token: write

    # Set deployment environment
    environment:
      name: production
      url: ${{ steps.deployment.outputs.page_url }}

    steps:

      # Execution steps

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
